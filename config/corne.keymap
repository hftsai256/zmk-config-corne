/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hml: HomerowModLeft {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 30 18 19 7 8 9 10 22 34 33 32 31 21 20 11 23 35 41 40 39 24 36 37>;
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
        };

        hmr: HomerowModRight {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MOD_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 40 41 35>;
            quick-tap-ms = <180>;
        };

        high_fn: high_fn {
            compatible = "zmk,behavior-tap-dance";
            label = "HIGH_FN";
            #binding-cells = <0>;
            bindings = <&kp F11>, <&kp F12>;
        };

        ht: HoldTap {
            compatible = "zmk,behavior-hold-tap";
            label = "HoldTap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    combos {
        compatible = "zmk,combos";

        tri_layer {
            bindings = <&mo 4>;
            key-positions = <37 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp TAB         &kp Q         &kp W            &kp E     &kp R  &kp T        &kp Y    &kp U  &kp I          &kp O        &kp P            &kp BACKSPACE
&lt 3 ESC       &hml LCTRL A  &hml LEFT_ALT S  &kp D     &kp F  &kp G        &kp H    &kp J  &kp K          &hmr RALT L  &hmr RCTRL SEMI  &lt 3 SQT
&kp LEFT_SHIFT  &kp Z         &kp X            &kp C     &kp V  &kp B        &kp N    &kp M  &kp COMMA      &kp DOT      &kp FSLH         &kp RIGHT_SHIFT
                                               &kp LGUI  &mo 1  &kp SPACE    &kp RET  &mo 2  &kp RIGHT_GUI
            >;
        };

        Number {
            bindings = <
&high_fn  &ht F1 N1  &ht F2 N2  &ht F3 N3  &ht F4 N4  &ht F5 N5    &ht F6 N6     &ht F7 N7     &ht F8 N8               &ht F9 N9     &ht F10 N0       &trans
&kp F1    &kp F2     &kp F3     &kp F4     &kp F5     &kp F6       &kp KP_PLUS   &kp NUMBER_4  &kp NUMBER_5            &kp NUMBER_6  &kp KP_MULTIPLY  &trans
&kp F7    &kp F8     &kp F9     &kp F10    &kp F11    &kp F12      &kp KP_MINUS  &kp NUMBER_1  &kp NUMBER_2            &kp NUMBER_3  &kp KP_DIVIDE    &trans
                                &trans     &trans     &trans       &trans        &trans        &mt RIGHT_GUI NUMBER_0
            >;
        };

        Symbol {
            bindings = <
&ht TILDE GRAVE  &kp EXCL  &kp AT          &kp HASH        &kp DLLR         &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK      &kp LPAR          &kp RPAR           &kp DELETE
&trans           &trans    &kp HOME        &kp UP_ARROW    &kp END          &kp PG_UP    &kp MINUS  &kp EQUAL  &kp BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp DOUBLE_QUOTES
&trans           &trans    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp PG_DN    &kp UNDER  &kp PLUS   &kp PIPE       &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans
                                           &trans          &trans           &trans       &trans     &trans     &trans
            >;
        };

        Nav {
            bindings = <
&trans  &none   &trans  &trans  &trans  &trans    &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none  &none
&trans  &none   &trans  &none   &trans  &none     &none     &none      &none      &none      &none  &trans
                        &trans  &trans  &trans    &trans    &trans     &trans
            >;
        };

        Misc {
            bindings = <
&out OUT_TOG  &kp C_BRI_DN  &kp C_BRI_UP  &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP    &trans  &trans  &trans  &trans  &none  &kp C_AL_LOCK
&bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &none  &none
&none         &none         &none         &trans        &trans        &trans          &none   &none   &none   &none   &none  &kp C_SLEEP
                                          &none         &trans        &none           &none   &trans  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
